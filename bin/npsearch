#!/usr/bin/env ruby
require 'readline'
require 'English'
require 'slop'

ENV['RACK_ENV'] ||= 'production'

# display name for tools like `ps`
$PROGRAM_NAME = 'npsearch'

begin
  Slop.parse!(strict: true, help: true) do
    banner <<BANNER
SUMMARY:
  NpSearch - Identify Neuropeptide Precursors

USAGE:
  $ npsearch command [options]
BANNER

    on '-v', '--version',
       'Print version number of NpSearchHmmApp that will be loaded'

    on '-h', '--help',
       'Display this help message'

    run do
      if version?
        require 'npsearch/version'
        puts NpSearch::VERSION
        exit
      end
    end

    command 'app' do
      banner <<BANNER
SUMMARY:
  NpSearch HMM APP - Identify Neuropeptide Precursors

USAGE:
  $ npsearch app [options]

Examples:
  # Launch npsearch with the given config file
  $ npsearch --config ~/.npsearch_hmm_app.conf

  # Launch npsearch with 8 threads / port 8888
  $ npsearch --num_threads 8 --port 8888

  # Save the arguments used to a config file - e.g. saving the port 4567
  $ npsearch -s -p 4567

BANNER

      on 'n', 'num_threads=',
        'Number of threads to use to run a BLAST search',
        argument: true

      on 'c', 'config_file=',
        'Use the given configuration file',
        argument: true

      on 'p', 'port=',
        'Port to run NpSearch-HMM App on',
        argument: true

      on 'H', 'hmmer_bin=',
        'Load HMMER 3.0 binaries from this directory',
        argument: true

      on 'S', 'signalp_path=',
        'Load SignalP binary from this path.',
        argument: true

      on 'g', 'public_dir=',
        'The public directory from where the web app is served',
        argument: true

      on 's', 'set',
        'Set configuration value in default or given config file'

      on 'D', 'devel',
        'Start NpSearch-HMM App in development mode'

      clean_opts = lambda do |hash|
        hash.delete_if { |k, v| k == :set || v.nil? }
        hash
      end

      run do
        ENV['RACK_ENV'] = 'development' if devel?

        # Exit gracefully on SIGINT.
        stty = `stty -g`.chomp
        trap('INT') do
          puts ''
          puts 'Aborted.'
          system('stty', stty)
          exit
        end

        require 'npsearch_hmm_app'

        begin
          NpSearchHmmApp.init clean_opts[to_h]

        # The aim of following error recovery scenarios is to guide user to a
        # working NpSearchHmmApp installation. We expect to land following
        # error scenarios either when creating a new NpSearchHmmApp (first
        # time or later), or updating config values using -s CLI option.

        rescue NpSearchHmmApp::CONFIG_FILE_ERROR => e
          puts e
          exit!

        rescue NpSearchHmmApp::BIN_DIR_NOT_FOUND => e
          puts e

          unless bin?
            puts 'You can set the correct value by running:'
            puts
            puts '  NpSearchHmmApp -s -b <value>'
            puts
          end

          exit!

        rescue NpSearchHmmApp::NUM_THREADS_INCORRECT => e
          puts e

          unless num_threads?
            puts 'You can set the correct value by running:'
            puts
            puts '  NpSearchHmmApp -s -n <value>'
            puts
          end

          exit!

        rescue => e
          # This will catch any unhandled error and some very special errors.
          # Ideally we will never hit this block. If we do, there's a bug in
          # NpSearchHmmApp or something really weird going on. If we hit this
          # error block we show the stacktrace to the user requesting them to
          # post the same to our Google Group.
          puts <<MSG
Something went wonky

Looks like you have encountered a bug in NpSearch HMM App.
Please could you report this incident here -
https://github.com/IsmailM/npearch/issues

Error:
#{e.backtrace.unshift(e.message).join("\n")}
MSG
          exit
        end

        NpSearchHmmApp.config.write_config_file if set?
        NpSearchHmmApp.config.write_config_file if fetch_option(:set).value

      if interactive?
        NpSearchHmmApp.irb
        exit
      end

        NpSearchHmmApp.run
      end
    end
  end
rescue Slop::Error => e
  puts e
  puts "Run '#{$PROGRAM_NAME} -h' for help with command line options."
  exit
end
